import com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote
import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote
import com.bmuschko.gradle.cargo.convention.Deployable

group 'com.hpe.simpleservice'
version '1.0'

apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo-base'
apply plugin: 'sonar-runner'

apply from: 'tasks.gradle'

sourceCompatibility = 1.7

def minorVersion = System.getenv("BUILD_NUMBER") as Integer ?: 0
version = "1.0." + minorVersion as String

description = "Simple Services " + version

def springVersion = '4.1.4.RELEASE'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.0.3'
    }
}

dependencies {

    compile group: 'org.springframework', name: 'spring-core', version: springVersion
    compile group: 'org.springframework', name: 'spring-web', version: springVersion
    compile group: 'org.springframework', name: 'spring-webmvc', version: springVersion
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.2.3'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.4'

    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'

    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '1.2.0'
    testCompile group: 'org.springframework', name: 'spring-test', version: springVersion
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: '1.2.0'
}

class RemoteContainer {
    String name
    String hostname
    Integer port
    String username
    String password
    String container
    String context
    String protocol
}

def remoteContainers = [new RemoteContainer(name: 'local', hostname: 'localhost', context: 'api',  protocol: 'http',
                                port: 8080, username: 'admin', password: 'admin', container: 'tomcat7x'),
                        new RemoteContainer(name: 'development', hostname: 'YourServer', context: 'dev', protocol: 'http',
                                port: 80, username: 'user', password: 'password', container: 'tomcat7x'),
                        new RemoteContainer(name: 'qa', hostname: 'YourOtherServer', context: 'qa', protocol: 'http',
                                port: 80, username: 'password', password: 'password', container: 'tomcat8x')]

// make sure account used for deployment is in the 'manager-script' role, otherwise deployment will fail
remoteContainers.each { config ->
    //noinspection GroovyAssignabilityCheck
    task "deployTomcat${config.name.capitalize()}"(type: CargoDeployRemote, dependsOn: war) {
        description = "Deploys WAR to Tomcat server '${config.name}'."
        containerId = config.container
        hostname = config.hostname
        port = config.port
        protocol = config.protocol
        username = config.username
        password = config.password
        deployables = [new Deployable(context: config.context, file: configurations.archives.allArtifacts.files[0])]
    }
}

remoteContainers.each { config ->
    //noinspection GroovyAssignabilityCheck
    task "redeployTomcat${config.name.capitalize()}"(type: CargoRedeployRemote, dependsOn: war) {
        description = "Re-deploys WAR to Tomcat server '${config.name}'."
        containerId = config.container
        hostname = config.hostname
        port = config.port
        protocol = config.protocol
        username = config.username
        password = config.password
        deployables = [new Deployable(context: config.context, file: configurations.archives.allArtifacts.files[0])]
    }
}

//gradle clean build parameterizedDeploy -DDEPLOY_ENVIRONMENT=Development

task parameterizedDeploy(dependsOn: build) {

    doLast {
        def deployEnvironment

        if (System.properties['DEPLOY_ENVIRONMENT'] == null) {
            deployEnvironment = 'local'
        } else {
            deployEnvironment = System.properties['DEPLOY_ENVIRONMENT'].toString()
        }

        println ''
        println '    DeployEnvironment: ' + deployEnvironment
        println ''

        if (deployEnvironment.equalsIgnoreCase('qa')) {
            redeployTomcatQa.execute()
        } else if (deployEnvironment.equalsIgnoreCase('development')) {
            redeployTomcatDevelopment.execute()
        }
    }
}

def loadConfiguration() {
    def environment = 'local';

    if (System.properties['DEPLOY_ENVIRONMENT'] != null) {
        environment = System.properties['DEPLOY_ENVIRONMENT'].toString()
    }

    println ''
    println 'Configuration Environment: ' + environment
    println ''

    ext.environment = environment.toLowerCase()
}

sonarRunner {
    sonarProperties {
        property "sonar.host.url", "SonarURL"
        property "sonar.login", "user"
        property "sonar.password", "password"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projeectKey", System.getenv("JOB_NAME") +  "-sonarqube-runner"
        property "sonar.projeectName", System.getenv("JOB_NAME")
        property "sonar.projectBaseDir", System.getenv("WORKSPACE") + "/service/src"
        property "sonar.projectVersion", version
        property "sonar.jdbc.username", "username"
        property "sonar.jdbc.password", "password"
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
    }
}



loadConfiguration()

processResources.dependsOn copyConfiguration



